<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="selleck.email.dao.GoogleSearchMapper">
	<resultMap id="BaseResultMap" type="selleck.email.pojo.GoogleSearch">
		<id column="ID" property="id" jdbcType="INTEGER" />
		<result column="title_id" property="titleId" jdbcType="INTEGER" />
		<result column="real_id" property="realId" jdbcType="INTEGER" />
		<result column="html_title" property="htmlTitle" jdbcType="VARCHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="keywords" property="keywords" jdbcType="VARCHAR" />
		<result column="full_author" property="fullAuthor" jdbcType="VARCHAR" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="pick_date" property="pickDate" jdbcType="VARCHAR" />
		<result column="match_keys" property="matchKeys" jdbcType="VARCHAR" />
		<result column="interests" property="interests" jdbcType="VARCHAR" />
		<result column="small" property="small" jdbcType="INTEGER" />
		<result column="big" property="big" jdbcType="INTEGER" />
		<result column="product" property="product" jdbcType="INTEGER" />
		<result column="dict_keys" property="dictKeys" jdbcType="VARCHAR" />
	</resultMap>
    
    <sql id="Example_Where_Clause" >
    <trim prefix="where" prefixOverrides="and|or" >
      <if test="condition.email != null" >
         and email = #{condition.email}
      </if>
      <if test="condition.have_read != null" >
         and have_read = #{condition.have_read}
      </if>
    </trim>
  </sql>
  	
  	<sql id="Base_Column_List">
		id,title_id,real_id,title,html_title,keywords,full_author,address,email,pick_date,interests,small,big,product,dict_keys
  	</sql>
  	
  	<select id="selectByCriteria" resultMap="BaseResultMap" parameterType="common.handle.model.Criteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from emailselleck.google_search
    <if test="whereClause != null" >
      where ${whereClause}
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
  <select id="selectGSEmailByCriteria" resultMap="BaseResultMap" parameterType="common.handle.model.Criteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    	id , full_author
    from emailselleck.google_search_email
    <if test="whereClause != null" >
      where ${whereClause}
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
  <!--  252建表google_search_dup失败
  <select id="selectDup" resultMap="BaseResultMap" parameterType="common.handle.model.Criteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from google_search_dup
    <if test="whereClause != null" >
      where ${whereClause}
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  -->
  
  <select id="selectDup" resultMap="BaseResultMap" parameterType="common.handle.model.Criteria" > 
	SELECT s.id,s.html_title,s.full_author,s.real_id from emailselleck.google_search s GROUP BY s.html_title , s.full_author HAVING COUNT(*) > 1
  </select>
  
 <update id="updateArticle" parameterType="map" >
    update base_fields
    <set >
      <if test="record.fieldId != null" >
        FIELD_ID = #{record.fieldId},
      </if>
      <if test="record.field != null" >
        FIELD = #{record.field},
      </if>
      <if test="record.fieldName != null" >
        FIELD_NAME = #{record.fieldName},
      </if>
      <if test="record.valueField != null" >
        VALUE_FIELD = #{record.valueField},
      </if>
      <if test="record.displayField != null" >
        DISPLAY_FIELD = #{record.displayField},
      </if>
      <if test="record.enabled != null" >
        ENABLED = #{record.enabled},
      </if>
      <if test="record.sort != null" >
        SORT = #{record.sort},
      </if>
      <if test="record.needLocale != null" >
        NEED_LOCALE = #{record.needLocale},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateGoogleSearch" parameterType="selleck.email.pojo.GoogleSearch" >
    update emailselleck.google_search
	set real_id = #{realId,jdbcType=VARCHAR} , full_author = #{fullAuthor,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <update id="updateFullAuthor" parameterType="selleck.email.pojo.GoogleSearch" >
    update emailselleck.google_search_email
	set full_author = #{fullAuthor,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <update id="updateGetEmail" parameterType="selleck.email.pojo.GoogleSearch" >
    update emailselleck.google_search_email
	set get_email = #{getEmail,jdbcType=VARCHAR} , score = #{score,jdbcType=INTEGER} , date_time = #{dateTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <insert id="insertArticle" parameterType="selleck.email.pojo.Article" useGeneratedKeys="true" keyProperty="id">
    insert into selleck_edm_article ( title, TITLE_INDEX, ABSTRACT, KEYWORD,KEY_PLUS,email,CORRESPONDINGAUTHOR,CORRESPONDINGADDRESS,SOURCE_PUBLICATION,pDate,type,classification,research,source
      )
    values ( #{title,jdbcType=LONGVARCHAR}, #{titleIndex,jdbcType=VARCHAR}, 
      #{abs,jdbcType=LONGVARCHAR}, #{keyword,jdbcType=VARCHAR},#{keywordPlus,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{correspondingAuthor,jdbcType=VARCHAR},#{correspondingAddress,jdbcType=LONGVARCHAR},
      #{sourcePublication,jdbcType=VARCHAR}, #{pDate,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR},#{classification,jdbcType=VARCHAR},
       #{research,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}
      )
  </insert>
  
  <insert id="insertAuthor" parameterType="selleck.email.pojo.Author" useGeneratedKeys="true" keyProperty="id">
    insert into selleck_edm_author ( full_name, short_name, address, organization,EMAIL,SOURCE
      )
    values (#{fullName,jdbcType=VARCHAR}, #{shortName,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR}, #{organization,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{source,jdbcType=VARCHAR}
      )
  </insert>
  
  <insert id="insertArticleAuthorRel" parameterType="selleck.email.pojo.ArticleAuthorRel">
    insert into selleck_edm_article_author_rel (author_id, article_id , priority
      )
    values (#{authorId,jdbcType=INTEGER}, #{articleId,jdbcType=INTEGER}, #{priority,jdbcType=INTEGER}
      )
  </insert>
  
  <insert id="insertArticleNotUseDB" parameterType="selleck.email.pojo.Article" useGeneratedKeys="true" keyProperty="id">
    insert into emailhunter.selleck_edm_article ( title, TITLE_INDEX, ABSTRACT, KEYWORD,KEY_PLUS,email,CORRESPONDINGAUTHOR,CORRESPONDINGADDRESS,SOURCE_PUBLICATION,pDate,type,classification,research,source
      )
    values ( #{title,jdbcType=LONGVARCHAR}, #{titleIndex,jdbcType=VARCHAR}, 
      #{abs,jdbcType=LONGVARCHAR}, #{keyword,jdbcType=VARCHAR},#{keywordPlus,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{correspondingAuthor,jdbcType=VARCHAR},#{correspondingAddress,jdbcType=LONGVARCHAR},
      #{sourcePublication,jdbcType=VARCHAR}, #{pDate,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR},#{classification,jdbcType=VARCHAR},
       #{research,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}
      )
  </insert>
  
  <insert id="insertAuthorNotUseDB" parameterType="selleck.email.pojo.Author" useGeneratedKeys="true" keyProperty="id">
    insert into emailhunter.selleck_edm_author ( full_name, short_name, address, organization,EMAIL,SOURCE
      )
    values (#{fullName,jdbcType=VARCHAR}, #{shortName,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR}, #{organization,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{source,jdbcType=VARCHAR}
      )
  </insert>
  
  <insert id="insertArticleAuthorRelNotUseDB" parameterType="selleck.email.pojo.ArticleAuthorRel">
    insert into emailhunter.selleck_edm_article_author_rel (author_id, article_id , priority
      )
    values (#{authorId,jdbcType=INTEGER}, #{articleId,jdbcType=INTEGER}, #{priority,jdbcType=INTEGER}
      )
  </insert>
</mapper>